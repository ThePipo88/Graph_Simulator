#include <SFML/Graphics.hpp>
#include <iostream>
#include <stack>
#include "Linea.h"

using namespace std;
using namespace sf;

int main()
{
    int cant = 0;
    float x1, y1;
    float x2, y2;
    string letra = "";
    RenderWindow *window = new RenderWindow(VideoMode(1900, 1000), "SFML works!");
    vector<String> letras = { "A","B","c","D","E","F","G","H","I","J","K","L","M","N","Ã‘","O","P","Q","R","S","T","U","V","W","X","Y","Z"};
    RectangleShape line(sf::Vector2f(150, 5));
    line.rotate(70);
    line.setPosition(Vector2f(150, 150));
    line.setFillColor(Color::Green);

    Texture mapa;
    mapa.loadFromFile("Resources/Mapa4.PNG");
    Sprite mp1(mapa);
    mp1.setPosition(0.f, 0.f);

    sf::Vertex lines[2];
    Linea *linea;
    vector<Linea*> pila;
    bool vent = false;
    while (window->isOpen())
    {
        Event event;
        while (window->pollEvent(event))
        {
            if (event.type == Event::Closed) {
                window->close();
            }
             
            if (event.type == Event::MouseButtonPressed) {
                cant++;
                if (cant == 1) {
                    linea = new Linea();
                    pila.push_back(linea);
                    x1 = Mouse::getPosition(*window).x;
                    y1 = Mouse::getPosition(*window).y;
                    x2 = Mouse::getPosition(*window).x;
                    y2 = Mouse::getPosition(*window).y;
                    bool enc = false;
                    if (pila.size() > 1) {
                        
                        for (int i = 0; i < pila.size()-1; i++) {
                            if (pila[i]->getX1()+10 >= x1 && pila[i]->getX1()-10 <= x1 && pila[i]->getY1() + 10 >= y1 && pila[i]->getY1() - 10 <= y1 && enc == false) {
                                cout << "Entroo" << endl;
                                linea->setLetra1(pila[i]->getLetra1());
                                x1 = pila[i]->getX1();
                                y1 = pila[i]->getY1();
                                x2 = pila[i]->getX1();
                                y2 = pila[i]->getY1();
                                pila[pila.size() - 1]->setX1(x1);
                                pila[pila.size() - 1]->setY1(y1);
                                pila[pila.size() - 1]->setX2(x2);
                                pila[pila.size() - 1]->setY2(y2);
                                enc = true;
                            }
                            else if (pila[i]->getX2() + 10 >= x1 && pila[i]->getX2() - 10 <= x1 && pila[i]->getY2() + 10 >= y1 && pila[i]->getY2() - 10 <= y1 && enc == false) {
                                cout << "Entroo" << endl;
                                linea->setLetra1(pila[i]->getLetra2());
                                x1 = pila[i]->getX2();
                                y1 = pila[i]->getY2();
                                x2 = pila[i]->getX2();
                                y2 = pila[i]->getY2();
                                pila[pila.size() - 1]->setX1(x1);
                                pila[pila.size() - 1]->setY1(y1);
                                pila[pila.size() - 1]->setX2(x2);
                                pila[pila.size() - 1]->setY2(y2);
                                enc = true;
                            }
                        }
                    }
                    else {
                        pila[pila.size() - 1]->setX1(x1);
                        pila[pila.size() - 1]->setY1(y1);
                        pila[pila.size() - 1]->setX2(x2);
                        pila[pila.size() - 1]->setY2(y2);
                    }
                    if (enc == true) {
                        enc = false;
                    }
                    else {
                        linea->setLetra1(letras.back());
                        letras.pop_back();
                        pila[pila.size() - 1]->setX1(x1);
                        pila[pila.size() - 1]->setY1(y1);
                        pila[pila.size() - 1]->setX2(x2);
                        pila[pila.size() - 1]->setY2(y2);
                    }
                }
                else if (cant == 2) {
                    bool enc = false;

                    for (int i = 0; i < pila.size() - 1; i++) {
                        if (pila[i]->getX1() + 10 >= x2 && pila[i]->getX1() - 10 <= x2 && pila[i]->getY1() + 10 >= y2 && pila[i]->getY1() - 10 <= y2 && enc == false) {
                            cout << "Entroo" << endl;
                            pila[pila.size() - 1]->setLetra2(pila[i]->getLetra1());
                            pila[pila.size() - 1]->setX2(pila[i]->getX1());
                            pila[pila.size() - 1]->setY2(pila[i]->getY1());
                            cant = 0;
                            enc = true;
                            vent = true;
                        }
                        else if (pila[i]->getX2() + 10 >= x2 && pila[i]->getX2() - 10 <= x2 && pila[i]->getY2() + 10 >= y2 && pila[i]->getY2() - 10 <= y2 && enc == false) {
                            cout << "Entroo" << endl;

                            pila[pila.size() - 1]->setLetra2(pila[i]->getLetra2());
                            pila[pila.size() - 1]->setX2(pila[i]->getX2());
                            pila[pila.size() - 1]->setY2(pila[i]->getY2());
                            cant = 0;
                            enc = true;
                            vent = true;
                        }
                    }

                    if (enc == true) {
                        enc = false;
                    }
                    else {
                        pila[pila.size() - 1]->setLetra2(letras.back());
                        letras.pop_back();
                        x2 = Mouse::getPosition(*window).x;
                        y2 = Mouse::getPosition(*window).y;
                        pila[pila.size() - 1]->setX2(x2);
                        pila[pila.size() - 1]->setY2(y2);
                        cant = 0;
                        vent = true;
                    }
                }


                cout<< Mouse::getPosition(*window).x << " , " << Mouse::getPosition(*window).y << endl;
            }


            if (event.type == Event::MouseMoved) {
                if (cant == 1) {
                    x2 = Mouse::getPosition(*window).x;
                    y2 = Mouse::getPosition(*window).y;
                    pila[pila.size() - 1]->setX2(x2);
                    pila[pila.size() - 1]->setY2(y2);
                }
            }

            if (cant == 0 && vent) {

                if (event.key.code == sf::Keyboard::Enter) {
                    vent = false;
                    pila[pila.size() - 1]->setPeso(stoi(letra));
                    letra = "";
                }
                else if (event.type == sf::Event::TextEntered) {
                        if (event.text.unicode < 128)
                        {
                            letra += static_cast<char>(event.text.unicode);
                            cout << letra << endl;
                        }
                    }
            }
        }

        window->clear();
        window->draw(mp1);

            for (int i = 0; i < pila.size(); i++) {

                if (i == pila.size() - 1) {
                  //  if (cant != 0) {
                        pila[i]->dibujarLinea(window);
                   // }
                }
                else {
                    pila[i]->dibujarLinea(window);
                }   
            }
        
         if (cant == 0 && vent) {
             Texture peso;
             peso.loadFromFile("Resources/pesos.PNG");
             Sprite p1(peso);
             p1.setPosition(750.f, 400.f);
             sf::Text text1;
             sf::Font font;
             if (!font.loadFromFile("Resources/arial.ttf"))
             {
                 // error...
             }

             text1.setFont(font);
             text1.setString(letra);
             text1.setCharacterSize(24);
             text1.setFillColor(sf::Color::Red);
             text1.setStyle(sf::Text::Bold);
             text1.setPosition(970, 490);

             window->draw(p1);
             window->draw(text1);
         }

        window->display();
    }

    return 0;
}